# Quick run
```
##### 1. Quantile score
## Prepare raw data
# ls_datasset: Name of the dataset.
# df_raw: Raw expression data, with genes as rows and samples as columns.
# dataset_type: 'Training' or 'Validation'.
# df_Disease: The first column is the sample name, the second column is the disease status ('No' represents non-diseased samples, 'Yes' represents diseased samples). If survival information is available, the third column is the survival status (0 represents survival, 1 represents death), and the fourth column is the follow-up time (in months). Non-diseased samples do not need to have survival information filled in.
Quantile_score(ls_datasset, df_raw, dataset_type, df_Disease)

##### 2. Select the genes of interest
rst_Hype = UniQuant_Hypervariable_gene(n_hypervariable_gene = 1000)  
interest_gene = rst_Hype$Gene

##### 3. Training and Validation of the Diagnostic Model
rst_dg = UniQuant_Disease_gene(ls_gene = interest_gene)  
Disease_gene = rst_dg$Disease_gene

rst_Training = UniQuant_Model_Training(ls_gene = Disease_gene) 
rst_Validation = UniQuant_Model_Validation()

##### 4. Molecular classification
rst_Class = UniQuant_Class(ls_gene = interest_gene, n_Class = 3)  

##### 5. Subsequent analyses: survival analysis, differential gene expression analysis, enrichment analysis, etc.
```
 
  
---
# Complete analysis
## 0. Setting
```
dir_main = getwd()
dir_in = file.path(dir_main, '0.raw')
setwd(dir_main); set.seed(100)
```

## 1. Quantile score
```
##### Converts raw expression data of a dataset into quantile-based scores and organizes the disease status of the samples.
#### Single dataset 
ls_datasset = 'GSE36376'
df_raw = readRDS(file.path(dir_in, paste0(ls_datasset, '_Expression.rds')))
df_raw[1:4, 1:4]
```  

<div align="center"> 

|         | GSM890128 | GSM890129 | GSM890130 | GSM890131 |
|:-------------:|:-----------:|:-----------:|:-----------:|:-----------:|
| EEF1A1      | 14.054179 | 14.395189 | 14.349301 | 14.183636 |
| LOC643334   | 6.543733  | 6.399822  | 6.391479  | 6.190396  |
| SLC35E2     | 6.065169  | 6.172510  | 5.957617  | 5.980207  |
| LOC642820   | 6.862825  | 6.699461  | 6.726557  | 6.664170  |

</div>   


---  

```
df_Disease = readRDS(file.path(dir_in, paste0(ls_datasset, '_Disease.rds')))
df_Disease[c(1:4, ),]
print(rbind(head(df_Disease, 4), tail(df_Disease, 4)))
Quantile_score(ls_datasset, df_raw, "Validation", df_Disease)
``` 


<div align="center">

| Sample    | Disease |
|:---------:|:-------:|
| GSM890128 | No      |
| GSM890129 | No      |
| GSM890130 | No      |
| GSM890131 | No      |
| GSM890557 | Yes     |
| GSM890558 | Yes     |
| GSM890559 | Yes     |
| GSM890560 | Yes     |

</div>   


---

**Gene expression matrix based on quantile score transformation: **

<div align="center">  

|             |  GSE36376@GSM890128  |  GSE36376@GSM890129  | GSE36376@GSM890130 | GSE36376@GSM890131 |
|:------------:|:--------------------:|:--------------------:|:--------------------:|:--------------------:|
| EEF1A1      |          4           |          9           | 8                  | 6                  |
| LOC643334   |          10          |          8           | 8                  | 4                  |
| SLC35E2     |          4           |          7           | 2                  | 2                  |
| LOC642820   |          9           |          5           | 6                  | 4                  |

</div>   


---
**You can also batch process the datasets for transformation.** 

```
#### Training set
ls_datassets = c('GSE6764', 'GSE14520', 'GSE17856', 'GSE57957', 'GSE36376','GSE102079', 'GSE54236', 'GSE36411', 'GSE22058')

for (ls_datasset in ls_datassets){
  df_raw = readRDS(file.path(dir_in, paste0(ls_datasset, '_Expression.rds')))
  df_Disease = readRDS(file.path(dir_in, paste0(ls_datasset, '_Disease.rds')))
  Quantile_score(ls_datasset, df_raw, "Training", df_Disease)
}


#### Validation set
ls_datassets = c('PMID31585088', 'PMID35382356', 'GSE77314', 'GSE76427','GSE25097', 'GSE63898', 'GSE39791', 'GSE144269','GSE114564', 'GSE14811')

for (ls_datasset in ls_datassets){
  df_raw = readRDS(file.path(dir_in, paste0(ls_datasset, '_Expression.rds')))
  df_Disease = readRDS(file.path(dir_in, paste0(ls_datasset, '_Disease.rds')))
  Quantile_score(ls_datasset, df_raw, "Validation", df_Disease)
}
```



## 2. Select the genes of interest
```R
# Select the hypervariable genes that are expressed across the majority of the datasets.
rst_Hype = UniQuant_Hypervariable_gene(n_hypervariable_gene = 1000, dataset_threshold = 0.7)  
interest_gene = rst_Hype$Gene

# (optional) You can enter other genes of interest, such as immune genes, metabolic genes, cell cycle genes, etc.
```

## 3. Diagnostic model
### 3.1 Disease-related gene
```R
rst_dg = UniQuant_Disease_gene(ls_gene = interest_gene, disease_threshold = 0.7)  
Disease_gene = rst_dg$Disease_gene
```


### 3.2 Training diagnostic model
rst_Training = UniQuant_Model_Training(ls_gene = Disease_gene)  

### 3.3 Validation of diagnostic model
rst_Validation = UniQuant_Model_Validation()


## 4. Molecular classification
### 4.1. Classification 
rst_Class = UniQuant_Class(ls_gene = interest_gene, n_Class = 3)  
df_Class = rst_Class$df_Class
saveRDS(df_Class, file.path(dir_result, 'Class.rds'))

### 3.2. Survival analysis
library(survival); library(survminer)  
ls_dataset = 'GSE14520'  
dir_in = file.path(getwd(), '1.Quantile')  
dir_result = file.path(getwd(), '2.UniQuant'); if(!dir.exists(dir_result)) dir.create(dir_result, recursive = TRUE)

df_Disease = readRDS(file.path(dir_in, paste0(ls_dataset, '@Disease.rds')))
df_Class = readRDS(file.path(dir_result, 'Class.rds'))

df_Disease = df_Disease[!is.na(df_Disease$Time),]
df_Class_tmp <- df_Class[df_Class$Sample %in% df_Disease$Sample,]
df_Disease_Class = merge(df_Disease, df_Class_tmp, by = 'Sample')
unique_Class <- as.character(sort(unique(df_Disease_Class$Class)))


sfit = survfit(Surv(Time, Outcome)~Class, data = df_Disease_Class)

p <- ggsurvplot(sfit, pval = TRUE, data = df_Disease_Class, risk.table = FALSE, 
                legend.title = "Class",
                legend.labs = unique_Class,
                legend = "right",
                pval.size = 10,
                pval.coord = c(0.1,0.1),
                palette = c("#F8766D", "#00BA38", "#619CFF")
)

p$plot <- p$plot + theme(legend.title = element_text(face = "bold", size = 15)); p


png(file.path(dir_result, paste0("Survival_", ls_dataset, ".png")), width = 3000, height = 2500, res = 300, bg = "transparent"); print(p); dev.off()


## 4. Differential gene expression (DEG) analysis. 
### 4.1. DEG：Disease
rst_DEG_Disease = UniQuant_DEG_Disease(dataset_threshold = 0.7)

### 4.2. DEG：Class
rst_DEG_Class = UniQuant_DEG_Class(
  input_Class = rst_Class$df_Class,
  Class_test = 'Class_3',  
  Class_control = c('Class_1', 'Class_2'),
  dataset_threshold = 0.7)



---
# All functions
## Quantile_score
Converts raw expression data of a dataset into quantile-based scores and organizes the disease status of the samples.

## UniQuant_Hypervariable_gene
Select the hypervariable genes that are expressed across the majority of the datasets.